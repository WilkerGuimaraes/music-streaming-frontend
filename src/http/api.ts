/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Streaming music
 * OpenAPI spec version: 0.0.1
 */
export type PostSongsBody = {
  /** @minLength 3 */
  title: string;
  /** @minLength 3 */
  artistName: string;
  /** @minLength 3 */
  albumTitle?: string;
};

export type GetSongs200ItemArtist = {
  id: string;
  name: string;
};

/**
 * @nullable
 */
export type GetSongs200ItemAlbum = {
  id: string;
  title: string;
} | null;

export type GetSongs200Item = {
  id: string;
  title: string;
  artist: GetSongs200ItemArtist;
  /** @nullable */
  album: GetSongs200ItemAlbum;
};

export type GetArtists200Item = {
  id: string;
  name: string;
  songCount: number;
  albumCount: number;
};

export type GetArtistsArtistIdSongs200SongsItem = {
  id: string;
  title: string;
};

export type GetArtistsArtistIdSongs200 = {
  artistName: string;
  songs: GetArtistsArtistIdSongs200SongsItem[];
};

export type GetArtistsArtistIdSongs404 = {
  message: string;
};

export type GetAlbums200Item = {
  id: string;
  title: string;
  songCount: number;
  artistName: string;
};

export type GetAlbumsAlbumIdSongs200SongsItem = {
  title: string;
  artistName: string;
};

export type GetAlbumsAlbumIdSongs200 = {
  albumTitle?: string;
  songs: GetAlbumsAlbumIdSongs200SongsItem[];
};

export type PostPlaylistsBody = {
  /** @minLength 3 */
  name: string;
};

export type PostPlaylists201 = {
  playlistId: string;
};

export type PostPlaylists400 = {
  message: string;
};

export type GetPlaylists200Item = {
  id: string;
  name: string;
  songCount: number;
};

export type PutPlaylistsPlaylistIdSongsBody = {
  songId: string;
};

export type GetPlaylistsPlaylistIdSongs200SongsItemSongArtist = {
  name: string;
};

export type GetPlaylistsPlaylistIdSongs200SongsItemSong = {
  title: string;
  artist: GetPlaylistsPlaylistIdSongs200SongsItemSongArtist;
};

export type GetPlaylistsPlaylistIdSongs200SongsItem = {
  id: string;
  song: GetPlaylistsPlaylistIdSongs200SongsItemSong;
};

export type GetPlaylistsPlaylistIdSongs200 = {
  playlistId: string;
  playlistName: string;
  songs: GetPlaylistsPlaylistIdSongs200SongsItem[];
};

export type GetPlaylistsPlaylistIdSongs404 = {
  message: string;
};

export type PatchPlaylistsPlaylistIdBody = {
  /** @minLength 3 */
  name: string;
};

export const getPostSongsUrl = () => {


  

  return `http://localhost:3333/songs`
}

export const postSongs = async (postSongsBody: PostSongsBody, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getPostSongsUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postSongsBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



export const getGetSongsUrl = () => {


  

  return `http://localhost:3333/songs`
}

export const getSongs = async ( options?: RequestInit): Promise<GetSongs200Item[]> => {
  
  const res = await fetch(getGetSongsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSongs200Item[] = body ? JSON.parse(body) : {}

  return data
}



export const getGetArtistsUrl = () => {


  

  return `http://localhost:3333/artists`
}

export const getArtists = async ( options?: RequestInit): Promise<GetArtists200Item[]> => {
  
  const res = await fetch(getGetArtistsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetArtists200Item[] = body ? JSON.parse(body) : {}

  return data
}



export const getGetArtistsArtistIdSongsUrl = (artistId: string,) => {


  

  return `http://localhost:3333/artists/${artistId}/songs`
}

export const getArtistsArtistIdSongs = async (artistId: string, options?: RequestInit): Promise<GetArtistsArtistIdSongs200> => {
  
  const res = await fetch(getGetArtistsArtistIdSongsUrl(artistId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetArtistsArtistIdSongs200 = body ? JSON.parse(body) : {}

  return data
}



export const getGetAlbumsUrl = () => {


  

  return `http://localhost:3333/albums`
}

export const getAlbums = async ( options?: RequestInit): Promise<GetAlbums200Item[]> => {
  
  const res = await fetch(getGetAlbumsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetAlbums200Item[] = body ? JSON.parse(body) : {}

  return data
}



export const getGetAlbumsAlbumIdSongsUrl = (albumId: string,) => {


  

  return `http://localhost:3333/albums/${albumId}/songs`
}

export const getAlbumsAlbumIdSongs = async (albumId: string, options?: RequestInit): Promise<GetAlbumsAlbumIdSongs200> => {
  
  const res = await fetch(getGetAlbumsAlbumIdSongsUrl(albumId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetAlbumsAlbumIdSongs200 = body ? JSON.parse(body) : {}

  return data
}



export const getPostPlaylistsUrl = () => {


  

  return `http://localhost:3333/playlists`
}

export const postPlaylists = async (postPlaylistsBody: PostPlaylistsBody, options?: RequestInit): Promise<PostPlaylists201> => {
  
  const res = await fetch(getPostPlaylistsUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postPlaylistsBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: PostPlaylists201 = body ? JSON.parse(body) : {}

  return data
}



export const getGetPlaylistsUrl = () => {


  

  return `http://localhost:3333/playlists`
}

export const getPlaylists = async ( options?: RequestInit): Promise<GetPlaylists200Item[]> => {
  
  const res = await fetch(getGetPlaylistsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetPlaylists200Item[] = body ? JSON.parse(body) : {}

  return data
}



export const getGetPlaylistsPlaylistIdSongsNotInPlaylistUrl = (playlistId: string,) => {


  

  return `http://localhost:3333/playlists/${playlistId}/songs/not-in-playlist`
}

export const getPlaylistsPlaylistIdSongsNotInPlaylist = async (playlistId: string, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getGetPlaylistsPlaylistIdSongsNotInPlaylistUrl(playlistId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



export const getPutPlaylistsPlaylistIdSongsUrl = (playlistId: string,) => {


  

  return `http://localhost:3333/playlists/${playlistId}/songs`
}

export const putPlaylistsPlaylistIdSongs = async (playlistId: string,
    putPlaylistsPlaylistIdSongsBody: PutPlaylistsPlaylistIdSongsBody, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getPutPlaylistsPlaylistIdSongsUrl(playlistId),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      putPlaylistsPlaylistIdSongsBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



export const getGetPlaylistsPlaylistIdSongsUrl = (playlistId: string,) => {


  

  return `http://localhost:3333/playlists/${playlistId}/songs`
}

export const getPlaylistsPlaylistIdSongs = async (playlistId: string, options?: RequestInit): Promise<GetPlaylistsPlaylistIdSongs200> => {
  
  const res = await fetch(getGetPlaylistsPlaylistIdSongsUrl(playlistId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetPlaylistsPlaylistIdSongs200 = body ? JSON.parse(body) : {}

  return data
}



export const getPatchPlaylistsPlaylistIdUrl = (playlistId: string,) => {


  

  return `http://localhost:3333/playlists/${playlistId}`
}

export const patchPlaylistsPlaylistId = async (playlistId: string,
    patchPlaylistsPlaylistIdBody: PatchPlaylistsPlaylistIdBody, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getPatchPlaylistsPlaylistIdUrl(playlistId),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchPlaylistsPlaylistIdBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



export const getDeletePlaylistsPlaylistIdUrl = (playlistId: string,) => {


  

  return `http://localhost:3333/playlists/${playlistId}`
}

export const deletePlaylistsPlaylistId = async (playlistId: string, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getDeletePlaylistsPlaylistIdUrl(playlistId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



export const getDeleteSongsSongIdUrl = (songId: string,) => {


  

  return `http://localhost:3333/songs/${songId}`
}

export const deleteSongsSongId = async (songId: string, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getDeleteSongsSongIdUrl(songId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



export const getDeletePlaylistsPlaylistIdSongsSongIdUrl = (playlistId: string,
    songId: string,) => {


  

  return `http://localhost:3333/playlists/${playlistId}/songs/${songId}`
}

export const deletePlaylistsPlaylistIdSongsSongId = async (playlistId: string,
    songId: string, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getDeletePlaylistsPlaylistIdSongsSongIdUrl(playlistId,songId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}
